{"ast":null,"code":"import React,{useEffect,useState}from'react';import{API_URL,ENDPOINTS}from'../../../global/Constants';import axios from'axios';import'../../../assets/styles/components/EpisodesList.css';import'../../../assets/styles/components/Button.css';import{getArrayNumberBased}from\"../../../global/Utils\";import EpisodesListCharacter from\"./EpisodesListCharacter\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const EpisodesList=()=>{// Get all IDs based on fixed number that is known and ascending, ideally must be more dynamic.\nconst allLocationIDs=getArrayNumberBased(126);const allCharactersIDs=getArrayNumberBased(826);const allEpisodesIDs=getArrayNumberBased(51);const[allData,setAllData]=useState(null);const fetchAllData=async()=>{try{const responseLocations=await axios.get(\"\".concat(API_URL).concat(ENDPOINTS.locations,\"/\").concat(allLocationIDs.join(',')));const allLocations=responseLocations.data;const responseCharacters=await axios.get(\"\".concat(API_URL).concat(ENDPOINTS.characters,\"/\").concat(allCharactersIDs.join(',')));const allCharacters=responseCharacters.data;const responseEpisodes=await axios.get(\"\".concat(API_URL).concat(ENDPOINTS.episodes,\"/\").concat(allEpisodesIDs.join(',')));const allEpisodes=responseEpisodes.data;// Set the data in the state\nsetAllData({allLocations,allCharacters,allEpisodes});}catch(error){console.error('Error',error);}};useEffect(()=>{void fetchAllData();},[allData===null]);const getEpisodesCharacters=episode=>{const allCharacters=allData===null||allData===void 0?void 0:allData.allCharacters;let updatedCharacters=[];episode.characters.forEach(character=>{const characterID=character.split('/character/')[1];const characterData=allCharacters.find(characterDetailed=>characterDetailed.id===Number(characterID));const originID=characterData.origin.url.split('/location/')[1]!==undefined?Number(characterData.origin.url.split('/location/')[1]):0;updatedCharacters.push({origin:{name:characterData.origin.name,id:originID},name:characterData.name,id:Number(characterID)});});return updatedCharacters;};const getUniqueDimensions=characters=>{return[...Array.from(new Set(characters.map(dimension=>dimension.origin.id)))];};const getAllUpdatedEpisodes=()=>{const allEpisodes=allData===null||allData===void 0?void 0:allData.allEpisodes;let updatedEpisodes=[];allEpisodes===null||allEpisodes===void 0?void 0:allEpisodes.map(episode=>{const episodeCharacters=getEpisodesCharacters(episode);const uniqueDimensions=getUniqueDimensions(episodeCharacters);updatedEpisodes.push({...episode,characters:episodeCharacters,uniqueDimensions:uniqueDimensions});});return updatedEpisodes;};const sortedEpisodes=()=>{const allUpdatedEpisodes=getAllUpdatedEpisodes();return allUpdatedEpisodes.sort((a,b)=>b.uniqueDimensions.length-a.uniqueDimensions.length);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions\"}),/*#__PURE__*/_jsx(_Fragment,{children:sortedEpisodes().slice(0,10).map((episode,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"top-episode\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"top-episode-title\",children:[\"\".concat(index+1,\". \").concat(episode.name),\" \",/*#__PURE__*/_jsxs(\"i\",{children:[\"Unique origin dimensions: \",episode.uniqueDimensions.length]})]}),/*#__PURE__*/_jsx(EpisodesListCharacter,{episode:episode,locations:allData===null||allData===void 0?void 0:allData.allLocations},index)]}))})]});};export default EpisodesList;","map":{"version":3,"names":["React","useEffect","useState","API_URL","ENDPOINTS","axios","getArrayNumberBased","EpisodesListCharacter","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","EpisodesList","allLocationIDs","allCharactersIDs","allEpisodesIDs","allData","setAllData","fetchAllData","responseLocations","get","concat","locations","join","allLocations","data","responseCharacters","characters","allCharacters","responseEpisodes","episodes","allEpisodes","error","console","getEpisodesCharacters","episode","updatedCharacters","forEach","character","characterID","split","characterData","find","characterDetailed","id","Number","originID","origin","url","undefined","push","name","getUniqueDimensions","Array","from","Set","map","dimension","getAllUpdatedEpisodes","updatedEpisodes","episodeCharacters","uniqueDimensions","sortedEpisodes","allUpdatedEpisodes","sort","a","b","length","children","slice","index","className"],"sources":["/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {API_URL, ENDPOINTS} from '../../../global/Constants';\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\nimport '../../../assets/styles/components/Button.css';\nimport {getArrayNumberBased} from \"../../../global/Utils\";\nimport EpisodesListCharacter from \"./EpisodesListCharacter\";\nimport {APIData} from \"../../../global/Interfaces\";\n\nconst EpisodesList = () => {\n    // Get all IDs based on fixed number that is known and ascending, ideally must be more dynamic.\n    const allLocationIDs = getArrayNumberBased(126);\n    const allCharactersIDs = getArrayNumberBased(826);\n    const allEpisodesIDs = getArrayNumberBased(51);\n\n    const [allData, setAllData] = useState<APIData | null>(null);\n\n    const fetchAllData = async (): Promise<void> => {\n        try {\n            const responseLocations= await axios.get(`${API_URL}${ENDPOINTS.locations}/${allLocationIDs.join(',')}`);\n            const allLocations = responseLocations.data;\n\n            const responseCharacters= await axios.get(`${API_URL}${ENDPOINTS.characters}/${allCharactersIDs.join(',')}`);\n            const allCharacters = responseCharacters.data;\n\n            const responseEpisodes= await axios.get(`${API_URL}${ENDPOINTS.episodes}/${allEpisodesIDs.join(',')}`);\n            const allEpisodes = responseEpisodes.data;\n\n            // Set the data in the state\n            setAllData({\n                allLocations,\n                allCharacters,\n                allEpisodes,\n            });\n        } catch (error) {\n            console.error('Error', error);\n        }\n    };\n\n    useEffect(() => {\n        void fetchAllData();\n    }, [allData === null]);\n\n    const getEpisodesCharacters = (episode: any) => {\n        const allCharacters = allData?.allCharacters;\n        let updatedCharacters: any = [];\n\n        episode.characters.forEach((character: string) => {\n            const characterID: string = character.split('/character/')[1];\n            const characterData = allCharacters.find((characterDetailed: any) => characterDetailed.id === Number(characterID));\n            const originID = characterData.origin.url.split('/location/')[1] !== undefined ? Number(characterData.origin.url.split('/location/')[1]) : 0;\n\n            updatedCharacters.push({\n                origin: {\n                    name: characterData.origin.name,\n                    id: originID\n                },\n                name: characterData.name,\n                id: Number(characterID),\n            });\n        });\n\n        return updatedCharacters;\n    };\n\n    const getUniqueDimensions = (characters: any) => {\n        return [...Array.from(new Set(characters.map((dimension: any) => dimension.origin.id)))];\n    };\n\n    const getAllUpdatedEpisodes = () => {\n        const allEpisodes = allData?.allEpisodes;\n        let updatedEpisodes: any = [];\n\n        allEpisodes?.map((episode: any) => {\n            const episodeCharacters = getEpisodesCharacters(episode);\n            const uniqueDimensions = getUniqueDimensions(episodeCharacters);\n\n            updatedEpisodes.push({\n                ...episode,\n                characters: episodeCharacters,\n                uniqueDimensions: uniqueDimensions\n            })\n        });\n\n        return updatedEpisodes;\n    };\n\n    const sortedEpisodes = () => {\n        const allUpdatedEpisodes = getAllUpdatedEpisodes();\n\n        return allUpdatedEpisodes.sort(\n            (a: any, b: any) => b.uniqueDimensions.length - a.uniqueDimensions.length\n        );\n    }\n\n    return (\n        <div>\n            <h1>Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions</h1>\n            <>\n                {sortedEpisodes().slice(0, 10).map((episode: any, index: number) => (\n                    <div className=\"top-episode\">\n                        <h3 className=\"top-episode-title\">{`${index + 1}. ${episode.name}`} <i>Unique origin dimensions: {episode.uniqueDimensions.length}</i></h3>\n                        <EpisodesListCharacter\n                            key={index}\n                            episode={episode}\n                            locations={allData?.allLocations}\n                        />\n                    </div>\n                ))}\n            </>\n        </div>\n    );\n};\n\nexport default EpisodesList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}