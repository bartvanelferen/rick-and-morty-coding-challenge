{"ast":null,"code":"var _jsxFileName = \"/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { API_URL, ENDPOINTS } from '../../../global/Constants';\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\nimport { getArrayNumberBased } from \"../../../global/Utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EpisodesList = () => {\n  _s();\n  // Get all IDs based on fixed number that is known and ascending, ideally must be more dynamic.\n  const allLocationIDs = getArrayNumberBased(126);\n  const allCharactersIDs = getArrayNumberBased(826);\n  const allEpisodesIDs = getArrayNumberBased(51);\n  const [allData, setAllData] = useState(null);\n  const fetchAllData = async () => {\n    try {\n      const responseLocations = await axios.get(`${API_URL}${ENDPOINTS.locations}/${allLocationIDs.join(',')}`);\n      const allLocations = responseLocations.data;\n      const responseCharacters = await axios.get(`${API_URL}${ENDPOINTS.characters}/${allCharactersIDs.join(',')}`);\n      const allCharacters = responseCharacters.data;\n      const responseEpisodes = await axios.get(`${API_URL}${ENDPOINTS.episodes}/${allEpisodesIDs.join(',')}`);\n      const allEpisodes = responseEpisodes.data;\n\n      // Set the data in the state\n      setAllData({\n        allLocations,\n        allCharacters,\n        allEpisodes\n      });\n    } catch (error) {\n      console.error('Error', error);\n    }\n  };\n  useEffect(() => {\n    void fetchAllData();\n  }, [allData !== null]);\n  const getEpisodesCharacters = episode => {\n    const allCharacters = allData === null || allData === void 0 ? void 0 : allData.allCharacters;\n    let updatedCharacters = [];\n    episode.characters.forEach(character => {\n      const characterID = character.split('/character/')[1];\n      const origin = allCharacters.find(characterDetailed => characterDetailed.id === Number(characterID)).origin;\n      const originID = origin.url.split('/location/')[1] !== undefined ? Number(origin.url.split('/location/')[1]) : 0;\n      updatedCharacters.push({\n        origin: {\n          name: origin.name,\n          id: originID\n        },\n        id: Number(characterID)\n      });\n    });\n    return updatedCharacters;\n  };\n  const getUniqueDimensions = characters => {\n    console.log(characters);\n    console.log(new Set(characters.map(dimension => dimension.origin.id)));\n    debugger;\n    return new Set(characters.map(dimension => dimension.origin.id));\n  };\n  const getAllUpdatedEpisodes = () => {\n    const allEpisodes = allData === null || allData === void 0 ? void 0 : allData.allEpisodes;\n    let updatedEpisodes = [];\n    allEpisodes.map(episode => {\n      const episodeCharacters = getEpisodesCharacters(episode);\n      const uniqueDimensions = getUniqueDimensions(episodeCharacters);\n      updatedEpisodes.push({\n        ...episode,\n        characters: episodeCharacters,\n        uniqueDimensions: uniqueDimensions\n      });\n    });\n    return updatedEpisodes;\n  };\n\n  // const getAllEpisodesWithUniqueCount = () => {\n  //     const allEpisodesWithCharacters = getAllUpdatedEpisodes();\n  // }\n\n  if (allData !== null) {\n    getAllUpdatedEpisodes();\n    // console.log(getAllUpdatedEpisodes());\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_s(EpisodesList, \"upnytrp6AOtYZ/xX5jMNYzp9Fzo=\");\n_c = EpisodesList;\nexport default EpisodesList;\nvar _c;\n$RefreshReg$(_c, \"EpisodesList\");","map":{"version":3,"names":["React","useEffect","useState","API_URL","ENDPOINTS","axios","getArrayNumberBased","jsxDEV","_jsxDEV","EpisodesList","_s","allLocationIDs","allCharactersIDs","allEpisodesIDs","allData","setAllData","fetchAllData","responseLocations","get","locations","join","allLocations","data","responseCharacters","characters","allCharacters","responseEpisodes","episodes","allEpisodes","error","console","getEpisodesCharacters","episode","updatedCharacters","forEach","character","characterID","split","origin","find","characterDetailed","id","Number","originID","url","undefined","push","name","getUniqueDimensions","log","Set","map","dimension","getAllUpdatedEpisodes","updatedEpisodes","episodeCharacters","uniqueDimensions","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {API_URL, ENDPOINTS} from '../../../global/Constants';\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\nimport {getArrayNumberBased} from \"../../../global/Utils\";\n\ninterface Data {\n    allLocations: any;\n    allCharacters: any;\n    allEpisodes: any;\n}\n\nconst EpisodesList = () => {\n    // Get all IDs based on fixed number that is known and ascending, ideally must be more dynamic.\n    const allLocationIDs = getArrayNumberBased(126);\n    const allCharactersIDs = getArrayNumberBased(826);\n    const allEpisodesIDs = getArrayNumberBased(51);\n\n    const [allData, setAllData] = useState<Data | null>(null);\n\n    const fetchAllData = async (): Promise<void> => {\n        try {\n            const responseLocations= await axios.get(`${API_URL}${ENDPOINTS.locations}/${allLocationIDs.join(',')}`);\n            const allLocations = responseLocations.data;\n\n            const responseCharacters= await axios.get(`${API_URL}${ENDPOINTS.characters}/${allCharactersIDs.join(',')}`);\n            const allCharacters = responseCharacters.data;\n\n            const responseEpisodes= await axios.get(`${API_URL}${ENDPOINTS.episodes}/${allEpisodesIDs.join(',')}`);\n            const allEpisodes = responseEpisodes.data;\n\n            // Set the data in the state\n            setAllData({\n                allLocations,\n                allCharacters,\n                allEpisodes,\n            });\n        } catch (error) {\n            console.error('Error', error);\n        }\n    };\n\n    useEffect(() => {\n        void fetchAllData();\n    }, [allData !== null]);\n\n    const getEpisodesCharacters = (episode: any) => {\n        const allCharacters = allData?.allCharacters;\n        let updatedCharacters: any = [];\n\n        episode.characters.forEach((character: string) => {\n            const characterID: string = character.split('/character/')[1];\n            const origin = allCharacters.find((characterDetailed: any) => characterDetailed.id === Number(characterID)).origin;\n            const originID = origin.url.split('/location/')[1] !== undefined ? Number(origin.url.split('/location/')[1]) : 0;\n\n            updatedCharacters.push({\n                origin: {\n                    name: origin.name,\n                    id: originID\n                },\n                id: Number(characterID),\n            });\n        });\n\n        return updatedCharacters;\n    };\n\n    const getUniqueDimensions = (characters: any) => {\n        console.log(characters);\n        console.log(new Set(characters.map((dimension: any) => dimension.origin.id)));\n\n        debugger;\n\n        return new Set(characters.map((dimension: any) => dimension.origin.id));\n    };\n\n    const getAllUpdatedEpisodes = () => {\n        const allEpisodes = allData?.allEpisodes;\n        let updatedEpisodes: any = [];\n\n        allEpisodes.map((episode: any) => {\n            const episodeCharacters = getEpisodesCharacters(episode);\n            const uniqueDimensions = getUniqueDimensions(episodeCharacters);\n\n            updatedEpisodes.push({\n                ...episode,\n                characters: episodeCharacters,\n                uniqueDimensions: uniqueDimensions\n            })\n        });\n\n        return updatedEpisodes;\n    };\n\n    // const getAllEpisodesWithUniqueCount = () => {\n    //     const allEpisodesWithCharacters = getAllUpdatedEpisodes();\n    // }\n\n\n    if (allData !== null) {\n        getAllUpdatedEpisodes()\n        // console.log(getAllUpdatedEpisodes());\n    }\n\n    return (\n        <div>\n            <h1>Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions</h1>\n            {/*{getTopEpisodes()}*/}\n        </div>\n    );\n};\n\nexport default EpisodesList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}