{"ast":null,"code":"var _jsxFileName = \"/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { API_URL, ENDPOINTS } from '../../../global/Constants';\nimport EpisodesListCharacter from \"./EpisodesListCharacter\";\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EpisodesList = () => {\n  _s();\n  // Get all IDs based on fixed number that is known and ascending, ideally must be more dynamic.\n  const allEpisodeIDs = Array.from({\n    length: 51\n  }, (_, index) => index + 1);\n  const [episodes, setEpisodes] = useState([]);\n  const fetchEpisodesData = async () => {\n    try {\n      const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}/${allEpisodeIDs.join(',')}`);\n      setEpisodes(response.data);\n    } catch (error) {\n      console.error('Error', error);\n    }\n  };\n  useEffect(() => {\n    void fetchEpisodesData();\n  }, []);\n  const getTopEpisodes = () => {\n    const episodeMap = {};\n    episodes.forEach(episode => {\n      episode.characters.forEach(characterUrl => {\n        // Get ID of episode from character url\n        const episodeId = characterUrl.split('/character/')[1];\n        if (!episodeMap[episodeId]) {\n          episodeMap[episodeId] = new Set();\n        }\n        episodeMap[episodeId].add(characterUrl);\n      });\n    });\n    const sortedEpisodes = Object.keys(episodeMap).sort((a, b) => episodeMap[b].size - episodeMap[a].size);\n    console.log(sortedEpisodes);\n    return sortedEpisodes.slice(0, 10).map(episodeId => {\n      const episode = episodes.find(episode => episode.id.toString() === episodeId);\n      const uniqueDimensions = Array.from(episodeMap[episodeId]);\n      debugger;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: `${episode === null || episode === void 0 ? void 0 : episode.name}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: uniqueDimensions.map(characterUrl => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(EpisodesListCharacter, {\n                characterUrl: characterUrl\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 37\n              }, this)\n            }, characterUrl, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, episodeId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), getTopEpisodes()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(EpisodesList, \"opzXqvj4mKBdgoksoyOT02oNzRo=\");\n_c = EpisodesList;\nexport default EpisodesList;\nvar _c;\n$RefreshReg$(_c, \"EpisodesList\");","map":{"version":3,"names":["React","useEffect","useState","API_URL","ENDPOINTS","EpisodesListCharacter","axios","jsxDEV","_jsxDEV","EpisodesList","_s","allEpisodeIDs","Array","from","length","_","index","episodes","setEpisodes","fetchEpisodesData","response","get","join","data","error","console","getTopEpisodes","episodeMap","forEach","episode","characters","characterUrl","episodeId","split","Set","add","sortedEpisodes","Object","keys","sort","a","b","size","log","slice","map","find","id","toString","uniqueDimensions","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {API_URL, ENDPOINTS} from '../../../global/Constants';\nimport {TopListEpisode} from '../../../global/Interfaces';\nimport EpisodesListCharacter from \"./EpisodesListCharacter\";\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\n\nconst EpisodesList = () => {\n    // Get all IDs based on fixed number that is known and ascending, ideally must be more dynamic.\n    const allEpisodeIDs = Array.from({length: 51}, (_, index: number) => index + 1)\n    const [episodes, setEpisodes] = useState<TopListEpisode[]>([]);\n\n    const fetchEpisodesData = async (): Promise<void> => {\n        try {\n            const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}/${allEpisodeIDs.join(',')}`);\n            setEpisodes(response.data);\n        } catch (error) {\n            console.error('Error', error);\n        }\n    };\n\n    useEffect(() => {\n        void fetchEpisodesData();\n    }, []);\n\n    const getTopEpisodes = () => {\n        const episodeMap: Record<string, Set<string>> = {};\n\n        episodes.forEach((episode) => {\n            episode.characters.forEach((characterUrl: string) => {\n                // Get ID of episode from character url\n                const episodeId = characterUrl.split('/character/')[1];\n\n                if (!episodeMap[episodeId]) {\n                    episodeMap[episodeId] = new Set();\n                }\n\n                episodeMap[episodeId].add(characterUrl);\n            });\n        });\n\n        const sortedEpisodes = Object.keys(episodeMap).sort(\n            (a, b) => episodeMap[b].size - episodeMap[a].size\n        );\n\n        console.log(sortedEpisodes);\n\n        return sortedEpisodes.slice(0, 10).map((episodeId: string) => {\n            const episode = episodes.find((episode): boolean => episode.id.toString() === episodeId);\n            const uniqueDimensions = Array.from(episodeMap[episodeId]);\n\n            debugger;\n\n            return (\n                <div key={episodeId}>\n                    <h3>{`${episode?.name}`}</h3>\n                    <ul>\n                        {uniqueDimensions.map((characterUrl: string) => {\n                            return (\n                                <li key={characterUrl}>\n                                    <EpisodesListCharacter characterUrl={characterUrl} />\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </div>\n            );\n        });\n    };\n\n    return (\n        <div>\n            <h1>Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions</h1>\n            {getTopEpisodes()}\n        </div>\n    );\n};\n\nexport default EpisodesList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}