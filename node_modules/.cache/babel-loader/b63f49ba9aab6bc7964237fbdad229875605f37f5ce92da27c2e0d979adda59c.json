{"ast":null,"code":"var _jsxFileName = \"/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { API_URL, ENDPOINTS } from '../../../global/Constants';\n// import { Episode } from '../../../global/Interfaces';\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\n\n// const EpisodesList = () => {\n//     const [episodes, setEpisodes] = useState<Episode[]>([]);\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState(false);\n//\n//     const fetchEpisodesData = async (): Promise<void> => {\n//         try {\n//             setError(false);\n//             const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}`);\n//             setEpisodes(response.data.results);\n//             setLoading(false);\n//         } catch (error) {\n//             setError(true);\n//             setLoading(false);\n//         }\n//     };\n//\n//     useEffect((): void => {\n//         void fetchEpisodesData();\n//     }, []);\n//\n//     return (\n//         <div className=\"episodes-list-container\">\n//             <h2>Top 10 Episodes</h2>\n//         </div>\n//     );\n// };\n//\n// export default EpisodesList;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EpisodesList = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [episodes, setEpisodes] = useState([]);\n  const fetchEpisodesData = async () => {\n    try {\n      const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}`);\n      setEpisodes(response.data.results);\n    } catch (error) {\n      console.error('Error', error);\n    }\n  };\n  useEffect(() => {\n    void fetchEpisodesData();\n  }, []);\n  const getTopEpisodes = () => {\n    const episodeMap = {};\n    episodes.forEach(episode => {\n      episode.characters.forEach(characterUrl => {\n        // Extract episode ID from character URL\n        const episodeId = characterUrl.split('/').pop();\n        if (!episodeMap[episodeId]) {\n          episodeMap[episodeId] = new Set();\n        }\n        episodeMap[episodeId].add(characterUrl);\n      });\n    });\n    const sortedEpisodes = Object.keys(episodeMap).sort((a, b) => episodeMap[b].size - episodeMap[a].size);\n    return sortedEpisodes.slice(0, 10).map(episodeId => {\n      const episode = episodes.find(e => e.id.toString() === episodeId);\n      const uniqueDimensions = Array.from(episodeMap[episodeId]);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: episode === null || episode === void 0 ? void 0 : episode.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: uniqueDimensions.map(characterUrl => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(CharacterInfo, {\n                characterUrl: characterUrl\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 37\n              }, this)\n            }, characterUrl, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, episodeId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this);\n    });\n  };\n  const CharacterInfo = ({\n    characterUrl\n  }) => {\n    _s();\n    const [character, setCharacter] = useState(null);\n    useEffect(() => {\n      const fetchCharacter = async () => {\n        try {\n          const response = await fetch(characterUrl);\n          const data = await response.json();\n          setCharacter(data);\n        } catch (error) {\n          console.error('Error fetching character:', error);\n        }\n      };\n      fetchCharacter();\n    }, [characterUrl]);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: character === null || character === void 0 ? void 0 : character.origin.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 16\n    }, this);\n  };\n  _s(CharacterInfo, \"U6X0dPsAgyZIXj6OlfE1MnnJ0Cg=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), getTopEpisodes()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n};\n_s2(EpisodesList, \"opzXqvj4mKBdgoksoyOT02oNzRo=\");\n_c = EpisodesList;\nexport default EpisodesList;\nvar _c;\n$RefreshReg$(_c, \"EpisodesList\");","map":{"version":3,"names":["React","useState","useEffect","API_URL","ENDPOINTS","axios","jsxDEV","_jsxDEV","EpisodesList","_s2","_s","$RefreshSig$","episodes","setEpisodes","fetchEpisodesData","response","get","data","results","error","console","getTopEpisodes","episodeMap","forEach","episode","characters","characterUrl","episodeId","split","pop","Set","add","sortedEpisodes","Object","keys","sort","a","b","size","slice","map","find","e","id","toString","uniqueDimensions","Array","from","children","name","fileName","_jsxFileName","lineNumber","columnNumber","CharacterInfo","character","setCharacter","fetchCharacter","fetch","json","origin","_c","$RefreshReg$"],"sources":["/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API_URL, ENDPOINTS } from '../../../global/Constants';\n// import { Episode } from '../../../global/Interfaces';\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\n\n// const EpisodesList = () => {\n//     const [episodes, setEpisodes] = useState<Episode[]>([]);\n//     const [loading, setLoading] = useState(false);\n//     const [error, setError] = useState(false);\n//\n//     const fetchEpisodesData = async (): Promise<void> => {\n//         try {\n//             setError(false);\n//             const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}`);\n//             setEpisodes(response.data.results);\n//             setLoading(false);\n//         } catch (error) {\n//             setError(true);\n//             setLoading(false);\n//         }\n//     };\n//\n//     useEffect((): void => {\n//         void fetchEpisodesData();\n//     }, []);\n//\n//     return (\n//         <div className=\"episodes-list-container\">\n//             <h2>Top 10 Episodes</h2>\n//         </div>\n//     );\n// };\n//\n// export default EpisodesList;\n\ninterface Episode {\n    id: number;\n    name: string;\n    characters: Array<string>;\n}\n\ninterface Character {\n    id: number;\n    name: string;\n    origin: {\n        name: string;\n        url: string;\n    };\n}\n\nconst EpisodesList = () => {\n    const [episodes, setEpisodes] = useState<Episode[]>([]);\n\n    const fetchEpisodesData = async (): Promise<void> => {\n        try {\n            const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}`);\n            setEpisodes(response.data.results);\n        } catch (error) {\n            console.error('Error', error);\n        }\n    };\n\n    useEffect(() => {\n        void fetchEpisodesData();\n    }, []);\n\n    const getTopEpisodes = () => {\n        const episodeMap: Record<string, Set<string>> = {};\n\n        episodes.forEach((episode) => {\n            episode.characters.forEach((characterUrl) => {\n                // Extract episode ID from character URL\n                const episodeId = characterUrl.split('/').pop();\n\n                if (!episodeMap[episodeId]) {\n                    episodeMap[episodeId] = new Set();\n                }\n\n                episodeMap[episodeId].add(characterUrl);\n            });\n        });\n\n        const sortedEpisodes = Object.keys(episodeMap).sort(\n            (a, b) => episodeMap[b].size - episodeMap[a].size\n        );\n\n        return sortedEpisodes.slice(0, 10).map((episodeId) => {\n            const episode = episodes.find((e) => e.id.toString() === episodeId);\n            const uniqueDimensions = Array.from(episodeMap[episodeId]);\n\n            return (\n                <div key={episodeId}>\n                    <h2>{episode?.name}</h2>\n                    <ul>\n                        {uniqueDimensions.map((characterUrl) => {\n                            return (\n                                <li key={characterUrl}>\n                                    {/* Fetch character data to get dimension information */}\n                                    <CharacterInfo characterUrl={characterUrl} />\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </div>\n            );\n        });\n    };\n\n    const CharacterInfo: React.FC<{ characterUrl: string }> = ({ characterUrl }) => {\n        const [character, setCharacter] = useState<Character | null>(null);\n\n        useEffect(() => {\n            const fetchCharacter = async () => {\n                try {\n                    const response = await fetch(characterUrl);\n                    const data = await response.json();\n                    setCharacter(data);\n                } catch (error) {\n                    console.error('Error fetching character:', error);\n                }\n            };\n\n            fetchCharacter();\n        }, [characterUrl]);\n\n        return <span>{character?.origin.name}</span>;\n    };\n\n    return (\n        <div>\n            <h1>Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions</h1>\n            {getTopEpisodes()}\n        </div>\n    );\n};\n\nexport default EpisodesList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}