{"ast":null,"code":"var _jsxFileName = \"/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { API_URL, ENDPOINTS } from '../../../global/Constants';\nimport EpisodesListCharacter from './EpisodesListCharacter';\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EpisodesList = () => {\n  _s();\n  // Get all IDs based on fixed number that is known and ascending, ideally must be more dynamic.\n  const [episodes, setEpisodes] = useState([]);\n  const getAllEpisodesCount = async () => {\n    try {\n      const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}`);\n      return response.data.info.count;\n    } catch (error) {\n      console.error('Error', error);\n    }\n  };\n  const fetchEpisodesData = async () => {\n    const allEpisodesCount = Number(getAllEpisodesCount());\n    const allEpisodeIDs = Array.from({\n      length: allEpisodesCount\n    }, (_, index) => index + 1);\n    try {\n      const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}/${allEpisodeIDs.join(',')}`);\n      setEpisodes(response.data);\n    } catch (error) {\n      console.error('Error', error);\n    }\n  };\n  useEffect(() => {\n    void fetchEpisodesData();\n  }, []);\n  const getTopEpisodes = () => {\n    const episodeMap = {};\n    episodes.forEach(episode => {\n      episode.characters.forEach(characterUrl => {\n        // Get ID of episode from character url\n        const episodeId = characterUrl.split('/character/')[1];\n        if (!episodeMap[episodeId]) {\n          episodeMap[episodeId] = new Set();\n        }\n        episodeMap[episodeId].add(characterUrl);\n      });\n    });\n    const sortedEpisodes = Object.keys(episodeMap).sort((a, b) => episodeMap[b].size - episodeMap[a].size);\n    return sortedEpisodes.slice(0, 10).map(episodeId => {\n      const episode = episodes.find(episode => episode.id.toString() === episodeId);\n      const uniqueDimensions = Array.from(episodeMap[episodeId]);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: episode === null || episode === void 0 ? void 0 : episode.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: uniqueDimensions.map(characterUrl => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(EpisodesListCharacter, {\n                characterUrl: characterUrl\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 37\n              }, this)\n            }, characterUrl, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, episodeId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), getTopEpisodes()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(EpisodesList, \"opzXqvj4mKBdgoksoyOT02oNzRo=\");\n_c = EpisodesList;\nexport default EpisodesList;\nvar _c;\n$RefreshReg$(_c, \"EpisodesList\");","map":{"version":3,"names":["React","useState","useEffect","API_URL","ENDPOINTS","EpisodesListCharacter","axios","jsxDEV","_jsxDEV","EpisodesList","_s","episodes","setEpisodes","getAllEpisodesCount","response","get","data","info","count","error","console","fetchEpisodesData","allEpisodesCount","Number","allEpisodeIDs","Array","from","length","_","index","join","getTopEpisodes","episodeMap","forEach","episode","characters","characterUrl","episodeId","split","Set","add","sortedEpisodes","Object","keys","sort","a","b","size","slice","map","find","id","toString","uniqueDimensions","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API_URL, ENDPOINTS } from '../../../global/Constants';\nimport { ListEpisode } from '../../../global/Interfaces';\nimport EpisodesListCharacter from './EpisodesListCharacter';\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\n\nconst EpisodesList = () => {\n    // Get all IDs based on fixed number that is known and ascending, ideally must be more dynamic.\n    const [episodes, setEpisodes] = useState<ListEpisode[]>([]);\n\n    const getAllEpisodesCount = async (): Promise<void> => {\n        try {\n            const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}`);\n            return response.data.info.count;\n        } catch (error) {\n            console.error('Error', error);\n        }\n    };\n\n    const fetchEpisodesData = async (): Promise<void> => {\n        const allEpisodesCount: number = Number(getAllEpisodesCount());\n        const allEpisodeIDs: Array<number> = Array.from({length: allEpisodesCount}, (_, index: number) => index + 1);\n\n        try {\n            const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}/${allEpisodeIDs.join(',')}`);\n            setEpisodes(response.data);\n        } catch (error) {\n            console.error('Error', error);\n        }\n    };\n\n    useEffect(() => {\n        void fetchEpisodesData();\n    }, []);\n\n    const getTopEpisodes = () => {\n        const episodeMap: Record<string, Set<string>> = {};\n\n        episodes.forEach((episode) => {\n            episode.characters.forEach((characterUrl: string) => {\n                // Get ID of episode from character url\n                const episodeId = characterUrl.split('/character/')[1];\n\n                if (!episodeMap[episodeId]) {\n                    episodeMap[episodeId] = new Set();\n                }\n\n                episodeMap[episodeId].add(characterUrl);\n            });\n        });\n\n        const sortedEpisodes = Object.keys(episodeMap).sort(\n            (a, b) => episodeMap[b].size - episodeMap[a].size\n        );\n\n        return sortedEpisodes.slice(0, 10).map((episodeId: string) => {\n            const episode = episodes.find((episode): boolean => episode.id.toString() === episodeId);\n            const uniqueDimensions = Array.from(episodeMap[episodeId]);\n\n            return (\n                <div key={episodeId}>\n                    <h2>{episode?.name}</h2>\n                    <ul>\n                        {uniqueDimensions.map((characterUrl: string) => {\n                            return (\n                                <li key={characterUrl}>\n                                    <EpisodesListCharacter characterUrl={characterUrl} />\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </div>\n            );\n        });\n    };\n\n    return (\n        <div>\n            <h1>Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions</h1>\n            {getTopEpisodes()}\n        </div>\n    );\n};\n\nexport default EpisodesList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}