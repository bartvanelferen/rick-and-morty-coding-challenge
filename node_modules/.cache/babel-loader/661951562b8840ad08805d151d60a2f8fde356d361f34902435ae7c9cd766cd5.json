{"ast":null,"code":"var _jsxFileName = \"/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { API_URL, ENDPOINTS } from '../../../global/Constants';\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EpisodesList = () => {\n  _s();\n  // Get all IDs based on fixed number that is known and ascending, ideally must be more dynamic.\n  const allEpisodeIDs = Array.from({\n    length: 51\n  }, (_, index) => index + 1);\n  const [episodes, setEpisodes] = useState([]);\n  const fetchEpisodesData = async () => {\n    try {\n      const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}/${allEpisodeIDs.join(',')}`);\n      setEpisodes(response.data);\n    } catch (error) {\n      console.error('Error', error);\n    }\n  };\n  useEffect(() => {\n    void fetchEpisodesData();\n  }, []);\n\n  // const getTopEpisodes = () => {\n  //     const episodeMap: Record<string, Set<string>> = {};\n  //\n  //     episodes.forEach((episode) => {\n  //         episode.characters.forEach((characterUrl: string) => {\n  //             // Get ID of episode from character url\n  //             const episodeId = characterUrl.split('/character/')[1];\n  //\n  //             if (!episodeMap[episodeId]) {\n  //                 episodeMap[episodeId] = new Set();\n  //             }\n  //\n  //             episodeMap[episodeId].add(characterUrl);\n  //         });\n  //     });\n  //\n  //     const sortedEpisodes = Object.keys(episodeMap).sort(\n  //         (a, b) => episodeMap[b].size - episodeMap[a].size\n  //     );\n  //\n  //     return sortedEpisodes.slice(0, 10).map((episodeId: string) => {\n  //         const episode = episodes.find((episode): boolean => episode.id.toString() === episodeId);\n  //         const uniqueDimensions = Array.from(episodeMap[episodeId]);\n  //\n  //         debugger;\n  //\n  //         return (\n  //             <div key={episodeId}>\n  //                 <h3>{`${episode?.name}`}</h3>\n  //                 <ul>\n  //                     {uniqueDimensions.map((characterUrl: string) => {\n  //                         return (\n  //                             <li key={characterUrl}>\n  //                                 <EpisodesListCharacter characterUrl={characterUrl} />\n  //                             </li>\n  //                         );\n  //                     })}\n  //                 </ul>\n  //             </div>\n  //         );\n  //     });\n  // };\n\n  const getTopEpisodes = () => {\n    // Create a map to store the count of unique dimensions for each episode\n    const episodeDimensionCount = {};\n\n    // Count unique dimensions for each episode\n    episodes.forEach(episode => {\n      episodeDimensionCount[episode.id.toString()] = new Set(episode.characters.map(characterUrl => {\n        // Extract dimension name from character data\n        return characterUrl.split('/').pop();\n      }));\n    });\n\n    // Sort episodes based on the count of unique dimensions\n    const sortedEpisodes = Object.keys(episodeDimensionCount).sort((a, b) => episodeDimensionCount[b].size - episodeDimensionCount[a].size);\n\n    // Display the top 10 episodes\n    return sortedEpisodes.slice(0, 10).map(episodeId => {\n      const episode = episodes.find(e => e.id.toString() === episodeId);\n      const uniqueDimensions = Array.from(episodeDimensionCount[episodeId]);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: episode === null || episode === void 0 ? void 0 : episode.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: uniqueDimensions.map(dimension => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: dimension\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 33\n            }, this)\n          }, dimension, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, episodeId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), getTopEpisodes()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n_s(EpisodesList, \"opzXqvj4mKBdgoksoyOT02oNzRo=\");\n_c = EpisodesList;\nexport default EpisodesList;\nvar _c;\n$RefreshReg$(_c, \"EpisodesList\");","map":{"version":3,"names":["React","useEffect","useState","API_URL","ENDPOINTS","axios","jsxDEV","_jsxDEV","EpisodesList","_s","allEpisodeIDs","Array","from","length","_","index","episodes","setEpisodes","fetchEpisodesData","response","get","join","data","error","console","getTopEpisodes","episodeDimensionCount","forEach","episode","id","toString","Set","characters","map","characterUrl","split","pop","sortedEpisodes","Object","keys","sort","a","b","size","slice","episodeId","find","e","uniqueDimensions","children","name","fileName","_jsxFileName","lineNumber","columnNumber","dimension","_c","$RefreshReg$"],"sources":["/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {API_URL, ENDPOINTS} from '../../../global/Constants';\nimport {TopListEpisode} from '../../../global/Interfaces';\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\n\nconst EpisodesList = () => {\n    // Get all IDs based on fixed number that is known and ascending, ideally must be more dynamic.\n    const allEpisodeIDs = Array.from({length: 51}, (_, index: number) => index + 1)\n    const [episodes, setEpisodes] = useState<TopListEpisode[]>([]);\n\n    const fetchEpisodesData = async (): Promise<void> => {\n        try {\n            const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}/${allEpisodeIDs.join(',')}`);\n            setEpisodes(response.data);\n        } catch (error) {\n            console.error('Error', error);\n        }\n    };\n\n    useEffect(() => {\n        void fetchEpisodesData();\n    }, []);\n\n    // const getTopEpisodes = () => {\n    //     const episodeMap: Record<string, Set<string>> = {};\n    //\n    //     episodes.forEach((episode) => {\n    //         episode.characters.forEach((characterUrl: string) => {\n    //             // Get ID of episode from character url\n    //             const episodeId = characterUrl.split('/character/')[1];\n    //\n    //             if (!episodeMap[episodeId]) {\n    //                 episodeMap[episodeId] = new Set();\n    //             }\n    //\n    //             episodeMap[episodeId].add(characterUrl);\n    //         });\n    //     });\n    //\n    //     const sortedEpisodes = Object.keys(episodeMap).sort(\n    //         (a, b) => episodeMap[b].size - episodeMap[a].size\n    //     );\n    //\n    //     return sortedEpisodes.slice(0, 10).map((episodeId: string) => {\n    //         const episode = episodes.find((episode): boolean => episode.id.toString() === episodeId);\n    //         const uniqueDimensions = Array.from(episodeMap[episodeId]);\n    //\n    //         debugger;\n    //\n    //         return (\n    //             <div key={episodeId}>\n    //                 <h3>{`${episode?.name}`}</h3>\n    //                 <ul>\n    //                     {uniqueDimensions.map((characterUrl: string) => {\n    //                         return (\n    //                             <li key={characterUrl}>\n    //                                 <EpisodesListCharacter characterUrl={characterUrl} />\n    //                             </li>\n    //                         );\n    //                     })}\n    //                 </ul>\n    //             </div>\n    //         );\n    //     });\n    // };\n\n\n\n    const getTopEpisodes = () => {\n        // Create a map to store the count of unique dimensions for each episode\n        const episodeDimensionCount: Record<string, Set<string>> = {};\n\n        // Count unique dimensions for each episode\n        episodes.forEach((episode) => {\n            episodeDimensionCount[episode.id.toString()] = new Set(\n                episode.characters.map((characterUrl) => {\n                    // Extract dimension name from character data\n                    return characterUrl.split('/').pop();\n                })\n            );\n        });\n\n        // Sort episodes based on the count of unique dimensions\n        const sortedEpisodes = Object.keys(episodeDimensionCount).sort(\n            (a, b) => episodeDimensionCount[b].size - episodeDimensionCount[a].size\n        );\n\n        // Display the top 10 episodes\n        return sortedEpisodes.slice(0, 10).map((episodeId) => {\n            const episode = episodes.find((e) => e.id.toString() === episodeId);\n            const uniqueDimensions = Array.from(episodeDimensionCount[episodeId]);\n\n            return (\n                <div key={episodeId}>\n                    <h2>{episode?.name}</h2>\n                    <ul>\n                        {uniqueDimensions.map((dimension) => (\n                            <li key={dimension}>\n                                <strong>{dimension}</strong>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        });\n    };\n\n    return (\n        <div>\n            <h1>Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions</h1>\n            {getTopEpisodes()}\n        </div>\n    );\n};\n\nexport default EpisodesList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}