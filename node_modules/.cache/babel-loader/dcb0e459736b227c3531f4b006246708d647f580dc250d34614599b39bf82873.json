{"ast":null,"code":"var _jsxFileName = \"/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { API_URL, ENDPOINTS } from '../../../global/Constants';\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\nimport { getArrayNumberBased } from \"../../../global/Utils\";\nimport EpisodesListCharacter from \"./EpisodesListCharacter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EpisodesList = () => {\n  _s();\n  // Get all IDs based on fixed number that is known and ascending, ideally must be more dynamic.\n  const allLocationIDs = getArrayNumberBased(126);\n  const allCharactersIDs = getArrayNumberBased(826);\n  const allEpisodesIDs = getArrayNumberBased(51);\n  const [allData, setAllData] = useState(null);\n  const fetchAllData = async () => {\n    try {\n      const responseLocations = await axios.get(`${API_URL}${ENDPOINTS.locations}/${allLocationIDs.join(',')}`);\n      const allLocations = responseLocations.data;\n      const responseCharacters = await axios.get(`${API_URL}${ENDPOINTS.characters}/${allCharactersIDs.join(',')}`);\n      const allCharacters = responseCharacters.data;\n      const responseEpisodes = await axios.get(`${API_URL}${ENDPOINTS.episodes}/${allEpisodesIDs.join(',')}`);\n      const allEpisodes = responseEpisodes.data;\n\n      // Set the data in the state\n      setAllData({\n        allLocations,\n        allCharacters,\n        allEpisodes\n      });\n    } catch (error) {\n      console.error('Error', error);\n    }\n  };\n  useEffect(() => {\n    void fetchAllData();\n  }, [allData === null]);\n  const getEpisodesCharacters = episode => {\n    const allCharacters = allData === null || allData === void 0 ? void 0 : allData.allCharacters;\n    let updatedCharacters = [];\n    episode.characters.forEach(character => {\n      const characterID = character.split('/character/')[1];\n      const characterData = allCharacters.find(characterDetailed => characterDetailed.id === Number(characterID));\n      const originID = characterData.origin.url.split('/location/')[1] !== undefined ? Number(characterData.origin.url.split('/location/')[1]) : 0;\n      updatedCharacters.push({\n        origin: {\n          name: characterData.origin.name,\n          id: originID\n        },\n        name: characterData.name,\n        id: Number(characterID)\n      });\n    });\n    return updatedCharacters;\n  };\n  const getUniqueDimensions = characters => {\n    return [...Array.from(new Set(characters.map(dimension => dimension.origin.id)))];\n  };\n  const getAllUpdatedEpisodes = () => {\n    const allEpisodes = allData === null || allData === void 0 ? void 0 : allData.allEpisodes;\n    let updatedEpisodes = [];\n    allEpisodes === null || allEpisodes === void 0 ? void 0 : allEpisodes.map(episode => {\n      const episodeCharacters = getEpisodesCharacters(episode);\n      const uniqueDimensions = getUniqueDimensions(episodeCharacters);\n      updatedEpisodes.push({\n        ...episode,\n        characters: episodeCharacters,\n        uniqueDimensions: uniqueDimensions\n      });\n    });\n    return updatedEpisodes;\n  };\n  const sortedEpisodes = () => {\n    const allUpdatedEpisodes = getAllUpdatedEpisodes();\n    return allUpdatedEpisodes.sort((a, b) => b.uniqueDimensions.length - a.uniqueDimensions.length);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: sortedEpisodes().slice(0, 10).map((episode, index) => /*#__PURE__*/_jsxDEV(EpisodesListCharacter, {\n        episode: episode\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(EpisodesList, \"upnytrp6AOtYZ/xX5jMNYzp9Fzo=\");\n_c = EpisodesList;\nexport default EpisodesList;\nvar _c;\n$RefreshReg$(_c, \"EpisodesList\");","map":{"version":3,"names":["React","useEffect","useState","API_URL","ENDPOINTS","axios","getArrayNumberBased","EpisodesListCharacter","jsxDEV","_jsxDEV","EpisodesList","_s","allLocationIDs","allCharactersIDs","allEpisodesIDs","allData","setAllData","fetchAllData","responseLocations","get","locations","join","allLocations","data","responseCharacters","characters","allCharacters","responseEpisodes","episodes","allEpisodes","error","console","getEpisodesCharacters","episode","updatedCharacters","forEach","character","characterID","split","characterData","find","characterDetailed","id","Number","originID","origin","url","undefined","push","name","getUniqueDimensions","Array","from","Set","map","dimension","getAllUpdatedEpisodes","updatedEpisodes","episodeCharacters","uniqueDimensions","sortedEpisodes","allUpdatedEpisodes","sort","a","b","length","children","fileName","_jsxFileName","lineNumber","columnNumber","slice","index","_c","$RefreshReg$"],"sources":["/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {API_URL, ENDPOINTS} from '../../../global/Constants';\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\nimport {getArrayNumberBased} from \"../../../global/Utils\";\nimport EpisodesListCharacter from \"./EpisodesListCharacter\";\nimport {APIData} from \"../../../global/Interfaces\";\n\nconst EpisodesList = () => {\n    // Get all IDs based on fixed number that is known and ascending, ideally must be more dynamic.\n    const allLocationIDs = getArrayNumberBased(126);\n    const allCharactersIDs = getArrayNumberBased(826);\n    const allEpisodesIDs = getArrayNumberBased(51);\n\n    const [allData, setAllData] = useState<APIData | null>(null);\n\n    const fetchAllData = async (): Promise<void> => {\n        try {\n            const responseLocations= await axios.get(`${API_URL}${ENDPOINTS.locations}/${allLocationIDs.join(',')}`);\n            const allLocations = responseLocations.data;\n\n            const responseCharacters= await axios.get(`${API_URL}${ENDPOINTS.characters}/${allCharactersIDs.join(',')}`);\n            const allCharacters = responseCharacters.data;\n\n            const responseEpisodes= await axios.get(`${API_URL}${ENDPOINTS.episodes}/${allEpisodesIDs.join(',')}`);\n            const allEpisodes = responseEpisodes.data;\n\n            // Set the data in the state\n            setAllData({\n                allLocations,\n                allCharacters,\n                allEpisodes,\n            });\n        } catch (error) {\n            console.error('Error', error);\n        }\n    };\n\n    useEffect(() => {\n        void fetchAllData();\n    }, [allData === null]);\n\n    const getEpisodesCharacters = (episode: any) => {\n        const allCharacters = allData?.allCharacters;\n        let updatedCharacters: any = [];\n\n        episode.characters.forEach((character: string) => {\n            const characterID: string = character.split('/character/')[1];\n            const characterData = allCharacters.find((characterDetailed: any) => characterDetailed.id === Number(characterID));\n            const originID = characterData.origin.url.split('/location/')[1] !== undefined ? Number(characterData.origin.url.split('/location/')[1]) : 0;\n\n            updatedCharacters.push({\n                origin: {\n                    name: characterData.origin.name,\n                    id: originID\n                },\n                name: characterData.name,\n                id: Number(characterID),\n            });\n        });\n\n        return updatedCharacters;\n    };\n\n    const getUniqueDimensions = (characters: any) => {\n        return [...Array.from(new Set(characters.map((dimension: any) => dimension.origin.id)))];\n    };\n\n    const getAllUpdatedEpisodes = () => {\n        const allEpisodes = allData?.allEpisodes;\n        let updatedEpisodes: any = [];\n\n        allEpisodes?.map((episode: any) => {\n            const episodeCharacters = getEpisodesCharacters(episode);\n            const uniqueDimensions = getUniqueDimensions(episodeCharacters);\n\n            updatedEpisodes.push({\n                ...episode,\n                characters: episodeCharacters,\n                uniqueDimensions: uniqueDimensions\n            })\n        });\n\n        return updatedEpisodes;\n    };\n\n    const sortedEpisodes = () => {\n        const allUpdatedEpisodes = getAllUpdatedEpisodes();\n\n        return allUpdatedEpisodes.sort(\n            (a: any, b: any) => b.uniqueDimensions.length - a.uniqueDimensions.length\n        );\n    }\n\n    return (\n        <div>\n            <h1>Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions</h1>\n            <ul>\n                {sortedEpisodes().slice(0, 10).map((episode: any, index: number) => (\n                    <EpisodesListCharacter\n                        key={index}\n                        episode={episode}\n                    />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default EpisodesList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}