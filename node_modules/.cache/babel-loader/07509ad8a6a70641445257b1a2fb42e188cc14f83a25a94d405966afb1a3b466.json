{"ast":null,"code":"var _jsxFileName = \"/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { API_URL, ENDPOINTS } from '../../../global/Constants';\n// import { Episode } from '../../../global/Interfaces';\nimport EpisodesListCharacter from './EpisodesListCharacter';\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EpisodesList = () => {\n  _s();\n  const [episodes, setEpisodes] = useState([]);\n  const fetchEpisodesData = async () => {\n    try {\n      const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}`);\n      setEpisodes(response.data.results);\n    } catch (error) {\n      console.error('Error', error);\n    }\n  };\n  useEffect(() => {\n    void fetchEpisodesData();\n  }, []);\n  const getTopEpisodes = () => {\n    // Create a map to store the count of unique dimensions for each episode\n    const episodeDimensionCount = {};\n\n    // Count unique dimensions for each episode\n    episodes.forEach(episode => {\n      episodeDimensionCount[episode.id.toString()] = new Set(episode.characters.map(characterUrl => {\n        // Extract dimension name from character data\n        const character = characterUrl.split('/').pop();\n        return character;\n      }));\n    });\n\n    // Sort episodes based on the count of unique dimensions\n    const sortedEpisodes = Object.keys(episodeDimensionCount).sort((a, b) => episodeDimensionCount[b].size - episodeDimensionCount[a].size);\n\n    // Display the top 10 episodes\n    return sortedEpisodes.slice(0, 10).map(episodeId => {\n      const episode = episodes.find(e => e.id.toString() === episodeId);\n      const uniqueDimensions = Array.from(episodeDimensionCount[episodeId]);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: episode === null || episode === void 0 ? void 0 : episode.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: uniqueDimensions.map(dimension => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: dimension\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: episode === null || episode === void 0 ? void 0 : episode.characters.filter(characterUrl => {\n                const character = characterUrl.split('/').pop();\n                return character === dimension;\n              }).map(characterUrl => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(EpisodesListCharacter, {\n                  characterUrl: characterUrl\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 49\n                }, this)\n              }, characterUrl, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 45\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }, this)]\n          }, dimension, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, episodeId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), getTopEpisodes()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n_s(EpisodesList, \"opzXqvj4mKBdgoksoyOT02oNzRo=\");\n_c = EpisodesList;\nexport default EpisodesList;\nvar _c;\n$RefreshReg$(_c, \"EpisodesList\");","map":{"version":3,"names":["React","useState","useEffect","API_URL","ENDPOINTS","EpisodesListCharacter","axios","jsxDEV","_jsxDEV","EpisodesList","_s","episodes","setEpisodes","fetchEpisodesData","response","get","data","results","error","console","getTopEpisodes","episodeDimensionCount","forEach","episode","id","toString","Set","characters","map","characterUrl","character","split","pop","sortedEpisodes","Object","keys","sort","a","b","size","slice","episodeId","find","e","uniqueDimensions","Array","from","children","name","fileName","_jsxFileName","lineNumber","columnNumber","dimension","filter","_c","$RefreshReg$"],"sources":["/Users/bartvanelferen/Desktop/Projects/rick-and-morty-app/src/components/Episodes/EpisodesList/EpisodesList.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API_URL, ENDPOINTS } from '../../../global/Constants';\n// import { Episode } from '../../../global/Interfaces';\nimport EpisodesListCharacter from './EpisodesListCharacter';\nimport axios from 'axios';\nimport '../../../assets/styles/components/EpisodesList.css';\n\ninterface Episode {\n    id: number;\n    name: string;\n    characters: Array<string>;\n}\n\nconst EpisodesList = () => {\n    const [episodes, setEpisodes] = useState<Episode[]>([]);\n\n    const fetchEpisodesData = async (): Promise<void> => {\n        try {\n            const response = await axios.get(`${API_URL}${ENDPOINTS.episodes}`);\n            setEpisodes(response.data.results);\n        } catch (error) {\n            console.error('Error', error);\n        }\n    };\n\n    useEffect(() => {\n        void fetchEpisodesData();\n    }, []);\n\n    const getTopEpisodes = () => {\n        // Create a map to store the count of unique dimensions for each episode\n        const episodeDimensionCount: Record<string, Set<string>> = {};\n\n        // Count unique dimensions for each episode\n        episodes.forEach((episode) => {\n            episodeDimensionCount[episode.id.toString()] = new Set(\n                episode.characters.map((characterUrl) => {\n                    // Extract dimension name from character data\n                    const character = characterUrl.split('/').pop();\n                    return character;\n                })\n            );\n        });\n\n        // Sort episodes based on the count of unique dimensions\n        const sortedEpisodes = Object.keys(episodeDimensionCount).sort(\n            (a, b) => episodeDimensionCount[b].size - episodeDimensionCount[a].size\n        );\n\n        // Display the top 10 episodes\n        return sortedEpisodes.slice(0, 10).map((episodeId) => {\n            const episode = episodes.find((e) => e.id.toString() === episodeId);\n            const uniqueDimensions = Array.from(episodeDimensionCount[episodeId]);\n\n            return (\n                <div key={episodeId}>\n                    <h2>{episode?.name}</h2>\n                    <ul>\n                        {uniqueDimensions.map((dimension) => (\n                            <li key={dimension}>\n                                <h3>{dimension}</h3>\n                                <ul>\n                                    {episode?.characters\n                                        .filter((characterUrl) => {\n                                            const character = characterUrl.split('/').pop();\n                                            return character === dimension;\n                                        })\n                                        .map((characterUrl) => (\n                                            <li key={characterUrl}>\n                                                <EpisodesListCharacter characterUrl={characterUrl} />\n                                            </li>\n                                        ))}\n                                </ul>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            );\n        });\n    };\n\n    return (\n        <div>\n            <h1>Top 10 Episodes with Highest Count of Unique Characters' Origin Dimensions</h1>\n            {getTopEpisodes()}\n        </div>\n    );\n};\n\nexport default EpisodesList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}